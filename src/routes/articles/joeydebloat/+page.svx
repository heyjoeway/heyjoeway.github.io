---
title: "Finally Talking about JoeyDebloat"
date: 2025-06-04
categories: programming software tools
comments: true
---

I think we all have our laundry list of crap to do when setting up Windows. Install Chrome, some tools, do what you can to make Windows Update and all of the other notifications get out of your face. Some might even go as far as to install [LTSC](https://techcommunity.microsoft.com/blog/windows-itpro-blog/ltsc-what-is-it-and-when-should-it-be-used/293181) (and you probably should, even if M$ doesn't want you to).

When you use Windows long enough, that list can get big. And I've been using Windows for a long, long time now. At least 22 years. Combine that with the mountain of useless, half-baked crap that gets added every year and it's very easy to have the tweaks and installs take DAYS if done manually.

# The Path Tread Before

My efforts to stop retreading ground didn't start with debloating. It started when I had a fleet of student devices to deploy as a Research Assistant in grad school. I had already considered plenty of other solutions before rolling my own:

- **Deploy a disk image**: I did end up using this when deploying a bunch of devices at the same time, and it works great when you want everything to have the same stuff. But you will run into collisions with hostnames and other identifiers. For what most people are reading this article for, this isn't viable.
- **MDM Solutions**: Our program did not have the funds for this, otherwise I might've tried it. A good solution for managing a fleet, but not so much for personal installs.
- **Customized Install Media**: In the context of debloating, this will probably bring memories of TinyXP/10/11. I think it's clear from their attempts, however impressive they are, that they are NOT the way forward. They're difficult to audit as safe ([except Tiny11](https://github.com/ntdevlabs/tiny11builder)), difficult to maintain, quickly fall behind in support, and often break updates and other features. You won't be picking and choosing what you want, you'll be accepting a very set-in-stone preset that you'll be committing to (and then distrohopping away from). Oh, and in the context of deploying devices, it's a pain in the ass there too.
- **Debloat Scripts and Tools**: Right, so this is what I settled on. So lets get into this more.

# Why So Complicated

There are probably hundreds of Windows debloat tools out there at this point. I'm not going to even try to list them all. But there's been some patterns I've noticed that feel very counterproductive:

- **GUI Debloaters**: I'm not gonna mince words here: *if you make a GUI for your debloater, I think you are wasting your time.* I'm only ever gonna run this thing once when I install Windows. The development effort of maintaining a GUI should be saved for software people are going to interact with on a regular basis. And the quality of most of these programs reflects this: their tweaks tend to break random stuff that they shouldn't, have insane defaults, and don't get updated as much as they should.
- **Maintaining tweaks you don't even use**: I can tell a lot of the tweaks in debloaters aren't actually being used by the people maintaining and distributing them. Ironically, this actually ends up bloating the debloaters with yet more shit that doesn't work and wasting even more of peoples' time. I'm not going to claim my debloater is perfect with this but 99% of everything in it I use on a daily basis.
- **MacroTweaks**: Each tweak should have a very limited scope. A couple registry keys or commands that do one thing and one thing only. I want to disable Defender, not my firewall (I'm looking at you [privacy.sexy](https://privacy.sexy/)).

# MiniWinDeploy: A Simple Basis

That leads me to the first part of my debloat empire: [MiniWinDeploy](https://github.com/heyjoeway/miniwindeploy). I'm just gonna copy my description here because I think it explains it well:

> Stupid simple task runner, intended for deploying/debloating/customizing Windows
>
> ...
>
> The following filetypes are recognized:
> 
> - bat:  Runs batch script and waits until exit.
> 
> - exe:  Runs executable and waits until exit.
> 
> - lnk:  Executes shortcut and waits for process to exit.
> 
> - msi:  Executes MSI installer silently and waits until finished. Cancels restarts.
> 
> - ps1:  Runs Powershell script and waits until exit.
> 
> - reg:  Applies registry patch.
> 
> - xml:  For XML files beginning with "Wi-Fi-", registers the wireless profiles.
>         Ignores other XML files.
>
> ...
>
> Assume we have the following directory structure in the current working directory and that the current PC model name (as specified in System Information) is `modelname`:
>
> ```
> - All
> |-- 1
>   |-- hello.bat
> |-- 9
>   |-- world.bat
> - Models
> |-- modelname
>   |-- 5
>     |-- model.bat
> ```
>
> The following tasks will be executed, in order:
>
> ```
> All/1/hello.bat
> Models/modelname/5/model.bat
> All/9/world.bat
> ```
>
> All folders in All and Models/modelname are added to a pool, [sorted naturally](https://en.wikipedia.org/wiki/Natural_sort_order), and then the contents of each directory are executed (after also being naturally sorted). If the modelname directory isn't present, the script will proceed with a warning.

Yes, that is *all* it does. (Well okay it writes a log too.) It runs executables and applies "tweak files" in the way that makes the most sense for unattended use. The script is 331 LOC that hasn't been touched in over 2 years. Which is a good thing, because it still works perfect. All of the actual tweaks are kept in a separate repository...

# JoeyDebloat

Despite the name "JoeyDebloat" the repo has turned into more of a tweak compilation. However, I think these tweaks will be welcomed by most, and for those who aren't pleased with what it does will instead be pleased by how easy it is to modify.

Some will be familiar with the `irm | iex` Powershell pattern that allows scripts to be hosted at a URL and be quickly executed with a one-liner. Probably the Most famous example are the [Microsoft Activation Scripts](https://github.com/massgravel/Microsoft-Activation-Scripts). (Side note: I have no idea why Microsoft hasn't cracked down on either of these things.)

> ⚠️ **WARNING:** `irm | iex` will IMMEDIATELY execute code from the internet on your computer with the permissions of whatever shell you execute it in. It will not respect ExecutionPolicy, it will not warn you about it being unsafe, it will just *GO*.

My goal was to use this pattern to make a one-liner that I could memorize easily. So, my repo contains a [script](https://github.com/heyjoeway/joeydebloat/blob/main/download.ps1) which GitHub Actions deploys to the root of a GitHub Pages website, making it so you can just do this:

```powershell
irm http://jojudge.com/joeydebloat | iex
```

41 characters, not bad! **You should read the contents of the script before running something like this.** In this case, it will prompt you before making any changes to your system. Quoting once again:

> This will install [Chocolatey](https://chocolatey.org/install), Python 3, Git, and the [miniwindeploy](https://github.com/heyjoeway/miniwindeploy) Python package. It then clones this repo (JoeyDebloat) and opens it in File Explorer. From there, change whatever scripts you'd like, then open Start.bat.

To be clear, when this script has finished running the only thing it will have done is install the aforementioned programs. No debloating/tweaking has been done yet. It will open file explorer, but before clicking `Start.bat` you may want to explore the `All` folder to see what exactly it's going to do to your system.

This is the best part about this approach: if you don't like a tweak, you just delete it. It uses your existing knowledge of using file explorer to subvert the need for a GUI. On the other side, if I ever want to add a tweak, I can just drop it into the repo as a file. And if you want to stay posted with what I've been changing, [you can just check the commit history](https://github.com/heyjoeway/joeydebloat/commits/main/). Why reinvent the wheel when you already have all the tools?

So, okay, what does this actually do? Well, if I listed everything we'd be here for hours and I'm also not gonna keep this article up to date. I was gonna do a brief overview but I don't even think that's worth it. [Each tweak is titled with a description of what it will do](https://github.com/heyjoeway/joeydebloat/tree/main/All), and to make things a bit easier to parse I've moved the more opinionated tweaks into separate folders. The general pattern is this: make Windows as quiet and well-behaved as possible, then add programs that I'm bound to download eventually.

You may have come to this article with the express interest of seeing what the debloat actually does. I think for people really interested in doing this, knowing how to efficiently maintain a tweak library themselves is going to be significantly more useful than relying on some random dude with no incentive to tailor their tweaks to everyone's lifestyle.

# :fork:

So you want to add your own tweaks. Or you want to suggest ones to add to my repo. Get on your GitHub account and fork the repo. After that, you'll have a couple things to change:

- You might want to rename the repo. Unless your name is also Joe.
- `download.ps1`: Replace the URL of my repo with yours.
- If you want the `irm | iex` one liner:
    - Configure GitHub Pages. I'm not gonna do a step by step on this, but the GitHub Actions deployment should work without changes. If anyone has more detailed instructions, either comment or leave it as a GitHub issue.
    - `README.md`: Replace the URL of the `irm | iex` script with your GitHub Page.

You'll still need to know how to use Git in order to maintain this, but if that's not in your wheelhouse then maintaining this might not be either.

# tldr

- Stop retreading ground
- Keep debloaters simple for both parties
- Curate only tweaks you will actually test
- Be careful executing random code from the net

# Shoutout to

- [privacy.sexy](https://privacy.sexy/): For a crapton of tweaks
- [elevenforum.com](https://www.elevenforum.com/): For being the only good Windows troubleshooting site (and for more tweaks)
- And to all the people making miscellaneous tweaks in random forums