{"type":"data","nodes":[{"type":"data","data":[{"categories":1},[2,3,4,5,6,7,8,9,10,11,12,13,14,15],"design","ui","meta","life","work","portfolio","programming","software","macos","multiplatform","games","photography","linux","windows"],"uses":{},"slash":"always"},{"type":"data","data":[{"articles":1,"slug":39},[2,11,20,30],{"slug":3,"path":4,"code":5,"fm":6},"lcatdb","/articles/lcatdb","\u003Cscript context=\"module\">\n\texport const metadata = {\"title\":\"Retrospective: lcatDB\",\"date\":\"2023-05-18T00:00:00.000Z\",\"categories\":\"programming life software ui\"};\n\tconst { title, date, categories } = metadata;\n\u003C/script>\n\u003Cscript lang=\"ts\">\n    import Image from \"$lib/Image.svelte\";\n    import Video from \"$lib/Video.svelte\";\n    import Figure from \"$lib/Figure.svelte\";\n    \n    import imgLogin1 from \"./localhost_3000_login.html.png?as=run\";\n    import imgLogin2 from \"./localhost_3000_login.html (1).png?as=run\";\n    import vidResponsive from \"./lcatDB Responsive Demo.mp4\";\n    import vidPages from \"./lcatDB Pages Demo.mp4\";\n\u003C/script>\n\n\u003Cp>lcatDB (Lake Champlain Anglers’ Temperature Database) was an online database and single page application (SPA) meant to provide a centralized means of recording, accessing, and analyzing vertical water temperature profiles to citizens of the Lake Champlain region. It was supported by the SUNY Plattsburgh Center for Earth & Environmental Science and the Lake Champlain Sea Grant. lcatDB was (what I consider to be) my first attempt at full stack software development. While the app never really took off and is no longer around today, I was able to demonstrate many of my strengths and learned several valuable lessons.\u003C/p>\n\u003Ch1>Client\u003C/h1>\n\u003CFigure>\n    \u003CImage src={imgLogin1} />\n    \u003CImage src={imgLogin2} />\n\u003C/Figure>\n\u003Cp>The UI of lcatDB very closely follows Google’s (now aged) Material Design guidelines. A hamburger menu is always available for root-level navigation and all elements are kept large, touch-friendly, and readable. Subtle iconography and color is used to draw attention to important elements and differentiate options. One element that I take pride in across most of my projects is responsive CSS, allowing for automatic adaptations to mobile, tablet, and desktop layouts.\u003C/p>\n\u003CFigure>\n    \u003CVideo src={vidResponsive} />\n\u003C/Figure>\n\u003Cp>lcatDB’s client was built using several JavaScript libraries, frameworks, and related tools, including:\u003C/p>\n\u003Cul>\n\u003Cli>Grunt (build system)\u003C/li>\n\u003Cli>Cordova (Android/iOS builds)\u003C/li>\n\u003Cli>jQuery\u003C/li>\n\u003Cli>Bootstrap\u003C/li>\n\u003Cli>Leaflet\u003C/li>\n\u003Cli>Mustache (for page templating)\u003C/li>\n\u003C/ul>\n\u003Cp>The client is structured as a SPA, and thus can run offline (albeit with some restrictions). An event queue was added to allow for offline operations to be uploaded to the server later, which was a required use-case due to poor cell service in the middle of the lake. Below is a video demo of various features and interactions!\u003C/p>\n\u003CFigure>\n    \u003CVideo src={vidPages} />\n\u003C/Figure>\n\u003Ch1>Server-Side\u003C/h1>\n\u003Cp>The server is probably the least interesting to talk about, but still quite important! It’s written for Node.JS and uses a mongoDB database to store users, readings, sensor information, and various other data! It provides a REST API and, in addition to serving the static pages (the same ones available offline), it uses mustache templates to provide pages for content only accessible online. I’ll talk more about this system later and my thoughts on its use.\u003C/p>\n\u003Cp>Passwords are stored as bcrypt hashes for essential user security. Users authenticate using \u003Ca\n  href=\"https://hacks.mozilla.org/2012/12/using-secure-client-side-sessions-to-build-simple-and-scalable-node-js-applications-a-node-js-holiday-season-part-3/\"\n  rel=\"nofollow\"\n>client sessions\u003C/a> which can be invalidated (logged out) server-side in case of certain user actions (eg. password resets). To ensure the accountability of data while providing basic editing features, edits to sensor information are tracked using mongoDB middleware and made visible to users. These are just some examples of security considerations made during development.\u003C/p>\n\u003Ch1>What I Would Do Differently\u003C/h1>\n\u003Cp>First of all, revisiting this codebase after working in Python 3 primarily for a few years and getting used to type annotations and IntelliSense… ouch. Very frequently I have to trace the flow of control manually with \u003Ccode>console.log\u003C/code>s and a lot of reading. I would definitely switch to TypeScript nowadays as things would be much more navigable. However, there’s a lot of deeper issues than that. Some of these arose due to the simple passage of time: some libraries and tools get adopted and maintained, some don’t.\u003C/p>\n\u003Cp>Firstly, lets address the use of Grunt. At the time of using it, it was relatively well-supported and I got used to it fairly quickly. The ability to mix JS scripting into your build system has a lot of benefits, though maybe a bit encouraging of hacky-ness. Nowadays, Grunt is pretty much dead. No releases in 2 years, and its mainly been surpassed by webpack. I’ve taken the hint and also begun migrating some of my older projects to webpack.\u003C/p>\n\u003Cp>Some issues, however, arose from my own inexperience. The biggest pill to swallow from this project is: it’s time to move on from jQuery and onto a proper framework. They’re infinitely less prone to breaking, with less time spent programming destructor functions and chasing bugs. jQuery’s purpose still feels mostly limited to small sites that need some dumb small feature quick and you don’t wanna deal with the poor syntax of vanilla JS, which between TS IntelliSense and AI code suggestions isn’t really even a problem anymore.\u003C/p>\n\u003Cp>Which leads to the root of that issue: \u003Cem>lcatDB did not originally plan to be a SPA\u003C/em>. That was added after many of the pages were implemented and the code was written, so the SPA capabilities were hacked on top. jQuery does not suit itself well in this use case, but at the time I couldn’t justify the time as a single developer to go back and start from scratch. And with the scale of the project growing further in a small scope-creep, the problems from jQuery scaled up as well. Despite the amount of time I spent considering my options for libraries and platforms, the change in scope caused a pile-up of other issues. This was the single-biggest takeaway: nail down the entire set of specifications first, then implement. Be very specific and thorough. Even then, it’s still easier said than done; at the time I didn’t even know what questions to ask.\u003C/p>\n\n",{"title":7,"date":8,"categories":9,"last_modified_at":10},"Retrospective: lcatDB",["Date","2023-05-18T00:00:00.000Z"],"programming life software ui","2024-12-04T14:57:02-05:00",{"slug":12,"path":13,"code":14,"fm":15},"responsive-design","/articles/responsive-design","\u003Cscript context=\"module\">\n\texport const metadata = {\"title\":\"Responsive Design Showcase\",\"date\":\"2023-05-18T00:00:00.000Z\",\"categories\":\"programming ui design\",\"last_modified_at\":\"2023-05-19T00:00:00.000Z\"};\n\tconst { title, date, categories, last_modified_at } = metadata;\n\u003C/script>\n\u003Cscript lang=\"ts\">\n    import Image from \"$lib/Image.svelte\";\n    import Video from \"$lib/Video.svelte\";\n    import Figure from \"$lib/Figure.svelte\";\n\n    import vidWhiteface from \"./Whiteface Responsive Demo.mp4\";\n    import vidLcatDB from \"./lcatDB Responsive Demo.mp4\";\n    import vidHeyjoeway from \"./heyjoeway Responsive Demo.mp4\";\n\u003C/script>\n\n\u003Cp>Here’s a mainly visual showcase of some of my work in responsive design!\u003C/p>\n\u003CFigure>\n    \u003CVideo src={vidWhiteface} />\n    \u003Cfigcaption slot=\"caption\">The Whiteface Tour is a 360-degree virtual tour of the Whiteface Mountain summit I developed using three.js. \u003Ca href=\"https://jojudge.com/whitefacetour\">Try it for yourself here!\u003C/a>\u003C/figcaption>\n\u003C/Figure>\n\u003CFigure>\n    \u003CVideo src={vidLcatDB} />\n    \u003Cfigcaption slot=\"caption\">lcatDB was a full-stack single-page application which I developed. \u003Ca href=\"/articles/lcatdb\">You can read more about it here.\u003C/a>\u003C/figcaption>\n\u003C/Figure>\n\u003CFigure>\n    \u003CVideo src={vidHeyjoeway} />\n    \u003Cfigcaption slot=\"caption\">And last but not least, the site you're reading this on! Try it for yourself!\u003C/figcaption>\n\u003C/Figure>\n\n",{"title":16,"date":17,"categories":18,"last_modified_at":19},"Responsive Design Showcase",["Date","2023-05-18T00:00:00.000Z"],"programming ui design",["Date","2023-05-19T00:00:00.000Z"],{"slug":21,"path":22,"code":23,"fm":24},"new-blog","/articles/new-blog","\u003Cscript context=\"module\">\n\texport const metadata = {\"title\":\"New Blog?\",\"date\":\"2022-11-07T00:00:00.000Z\",\"last_modified_at\":\"2023-02-11T00:00:00.000Z\",\"categories\":\"meta life design ui\",\"comments\":true};\n\tconst { title, date, last_modified_at, categories, comments } = metadata;\n\u003C/script>\n\u003Cscript lang=\"ts\">\n    import Image from \"$lib/Image.svelte\";\n    import Figure from \"$lib/Figure.svelte\";\n    \n    import imgWin98Logo from \"./Windows_98_logo.webp?as=run\";\n    import imgXPMCE from \"./xpmce.jpg?as=run\";\n\u003C/script>\n\n\u003Cp>So, I’m restructuring a lot of things in life right now. Why don’t we take care of the website too?\u003C/p>\n\u003Cp>I’ve been trying to find a good balance between maintainability, customization, and weight. Usually the mainstream options don’t hold up to those principles very well, but Jekyll actually manages it. It’s nice to be able to write everything in markdown, and the default templates are pretty simple and lightweight. \u003Cdel>Right now the only JS dependency is jQuery, we’ll see if it stays that way.\u003C/del> \u003Cem>EDIT 2/11/23: Removed jQuery. ;)\u003C/em> Will probably at least add a lightbox plugin for images, eventually.\u003C/p>\n\u003Cp>My site was previously written using Hexo, and while it got close to what I wanted, it was one of those things that was just non-mainstream enough that I could never get back into the flow of setting up a dev environment so that I could actually get to the writing. Lets hope this time goes a bit better!\u003C/p>\n\u003Cp>My previous website designs very heavily followed Material Design. I wanted to try something a bit more unique with this new site. I’ve taken inspiration from a few places:\u003C/p>\n\u003Ch3>Windows 98/XP\u003C/h3>\n\u003CFigure align=\"right\">\n    \u003CImage src={imgWin98Logo} />\n    \u003CImage src={imgXPMCE} />\n\u003C/Figure>\n\u003Cp>Most people referencing this would just throw on a vaporwave skin, maybe sprinkle a few Arizona cans and Evangelion renders here and there. I wanted to be a bit more subtle. The main font for titles and headers is Franklin Gothic, lifted straight from the Windows 98 logo. In its black weight, it’s very pleasing to look at while remaining readable. The main font for content is MS Sans Serif, which was used in the Windows 98 UI. I’m not 100% set on it right now but I figure its a nice callback. I tried Tahoma at one point (Windows XP UI font) but it’s a bit too playful for my taste; gets kinda obnoxious to look at.\u003C/p>\n\u003Cp>The background elements also call back to the design of Windows Media Center, which was included with the first PC my parents’ bought new for me.\u003C/p>\n\u003Ch3>iOS\u003C/h3>\n\u003Cp>Well, not exclusive to iOS, but certain elements of the site have a frosted glass touch to them. It’s subtle with the mostly-black background, but adds some nice flair.\u003C/p>\n\u003Ch3>“The 70’s”\u003C/h3>\n\u003Cp>Bold text, bold colors, simple designs. No references to the era specifically, just kinda lifting the general vibe.\u003C/p>\n\u003Ch3>Life\u003C/h3>\n\u003Cp>Orange is my favorite color. Wife’s favorite color bounces between sky blue and pastel pink. Our wedding colors were orange and pink. Nuff’ said.\u003C/p>\n\u003Ch3>What’s with the dice?\u003C/h3>\n\u003Cp>Needed a background element to go with the XPMCE thing. I was demoing this aesthetic on a custom startpage, and I figured it’d be fun to make it something randomized. At the same time, I wanted it to have a utilitarian purpose, so if I ever need a quick dice roll, I can just open a new tab! I’ve carried it over here, but might switch it in the future.\u003C/p>\n\u003Ch2>Going Forward\u003C/h2>\n\u003Cp>I want to spend more time doing things that bring me instrinsic happiness. Will writing in this blog be one of them? Who knows! But I’ll make an effort to keep up. Before I move onto the future, I’ll be transferring some content from my old site, doing some write-ups and reflections on my past few years of projects/life stuff, and having a bit of fun.\u003C/p>\n\n",{"title":25,"date":26,"last_modified_at":27,"categories":28,"comments":29},"New Blog?",["Date","2022-11-07T00:00:00.000Z"],["Date","2023-02-11T00:00:00.000Z"],"meta life design ui",true,{"slug":31,"path":32,"code":33,"fm":34},"gd-anime-was-a-mistake","/articles/gd-anime-was-a-mistake","\u003Cscript context=\"module\">\n\texport const metadata = {\"title\":\"Graphic Design: \\\"Anime was a Mistake\\\" Shirt\",\"date\":\"2019-01-21T00:00:00.000Z\",\"categories\":\"design ui\",\"last_modified_at\":\"2022-11-07T00:00:00.000Z\",\"comments\":true};\n\tconst { title, date, categories, last_modified_at, comments } = metadata;\n\u003C/script>\n\u003Cscript lang=\"ts\">\n\nimport Image from \"$lib/Image.svelte\";\nimport Figure from \"$lib/Figure.svelte\";\n\nimport imgFinal from \"./final.png?as=run:0\";\nimport imgLetters from \"./letters.svg\";\nimport imgBorder from \"./border.svg?as=run\";\nimport imgImport from \"./import.png?as=run\";\nimport imgTop from \"./top.png?as=run\";\nimport imgRaw from \"./raw.png?as=run:0\";\nimport imgOdyssey from \"./odyssey.png?as=run:0\";\n\nimport fileBlend from \"./anime.blend\";\n\n\u003C/script>\n\n\u003Cp>A not-so-serious venture into 3D graphic design.\u003C/p>\n\u003CFigure>\n    \u003CImage src={imgFinal} />\n\u003C/Figure>\n\u003Cp>This design was published as a shirt design on RedBubble back in December of 2017. \u003Cdel>You can view the design on RedBubble here.\u003C/del> Unfortunately, Nintendo themselves DMCA’d it because they felt like being petty.\u003C/p>\n\u003Ch2>Making Of\u003C/h2>\n\u003Cp>The first thing that was done was obtaining the Super Mario 256 font. This was then used to type the words onto an SVG using Inkscape. A second SVG was used to make the borders for the letters.\u003C/p>\n\u003CFigure frame=\"light\">\n    \u003CImage src={imgLetters} />\n    \u003CImage src={imgBorder} />\n\u003C/Figure>\n\u003Cp>These were then imported into Blender and extruded to make them 3D. Although the letters seem shallow in the final render, they are actually quite long. The letters were then given materials with appropriate colors.\u003C/p>\n\u003CFigure>\n    \u003CImage src={imgImport} />\n    \u003CImage src={imgTop} />\n\u003C/Figure>\n\u003Cp>The raw render out of Blender is as follows:\u003C/p>\n\u003CFigure>\n    \u003CImage src={imgRaw} />\n\u003C/Figure>\n\u003Cp>It’s lacking a lot of little details though. The letters have no gradients or sparkles, and the foreground graphic of Cappy is straight up missing. The final details were added in GIMP:\u003C/p>\n\u003CFigure>\n    \u003CImage src={imgFinal} />\n\u003C/Figure>\n\u003Cp>For comparison, here’s the original logo:\u003C/p>\n\u003CFigure>\n    \u003CImage src={imgOdyssey} />\n\u003C/Figure>\n\u003Ch2>Thoughts\u003C/h2>\n\u003Cp>There’s definitely a lot of things that could be improved here. The planet from the “O” in the original logo is completely missing. A lot of materials don’t look metallic enough. The borders don’t come down at the right angle and have gaps. Colors are a bit desaturated. The middle letters aren’t stretched enough and the top letters are too big. The Cappy graphic appears to be out of date (?). However, for something that was honestly just intended as a joke, I think it came out alright.\u003C/p>\n\u003Ch2>Download\u003C/h2>\n\u003Cp>If you’d like to download the original project file, you’re in luck! Here it is:\u003C/p>\n\u003Cp>\u003Ca href=\"{fileBlend}\">Blender Project\u003C/a>\u003C/p>\n\u003Cp>If you want the render itself, you should be able to just right click and “Save As”. Same goes for the SVGs.\u003C/p>\n\u003Cp>\u003Ca\n  href=\"https://creativecommons.org/licenses/by/4.0/\"\n  rel=\"nofollow\"\n>This project is licensed under CC BY 4.0.\u003C/a>\u003C/p>\n\n",{"title":35,"date":36,"categories":37,"last_modified_at":38,"comments":29},"Graphic Design: \"Anime was a Mistake\" Shirt",["Date","2019-01-21T00:00:00.000Z"],"design ui",["Date","2022-11-07T00:00:00.000Z"],"ui"],"uses":{"params":["slug"]}}]}
